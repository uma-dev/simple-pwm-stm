
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000402c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004250  08004250  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004258  08004258  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  080042d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080042d0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b13b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a76  00000000  00000000  0002b1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002cc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002d850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021264  00000000  00000000  0002e360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008dde  00000000  00000000  0004f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf462  00000000  00000000  000583a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  00127880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041e4 	.word	0x080041e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080041e4 	.word	0x080041e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fbd4 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f834 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9b6 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f98a 	bl	80008d8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80005c4:	f000 f93a 	bl	800083c <MX_TIM10_Init>
  MX_TIM1_Init();
 80005c8:	f000 f89e 	bl	8000708 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1 );
 80005cc:	2100      	movs	r1, #0
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x5c>)
 80005d0:	f001 fcb0 	bl	8001f34 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0x60>)
 80005d8:	f001 fd20 	bl	800201c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80005dc:	2104      	movs	r1, #4
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <main+0x60>)
 80005e0:	f001 fd1c 	bl	800201c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%i\r\n", i), 500);
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	490b      	ldr	r1, [pc, #44]	; (8000618 <main+0x68>)
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x6c>)
 80005ee:	f003 f9f3 	bl	80039d8 <siprintf>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005fa:	4908      	ldr	r1, [pc, #32]	; (800061c <main+0x6c>)
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <main+0x70>)
 80005fe:	f002 fd5a 	bl	80030b6 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f000 fc1e 	bl	8000e44 <HAL_Delay>
  {
 8000608:	e7ec      	b.n	80005e4 <main+0x34>
 800060a:	bf00      	nop
 800060c:	2000009c 	.word	0x2000009c
 8000610:	200000e4 	.word	0x200000e4
 8000614:	2000008c 	.word	0x2000008c
 8000618:	080041fc 	.word	0x080041fc
 800061c:	200000dc 	.word	0x200000dc
 8000620:	20000124 	.word	0x20000124

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 f9c8 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a25      	ldr	r2, [pc, #148]	; (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000694:	2308      	movs	r3, #8
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000698:	23b4      	movs	r3, #180	; 0xb4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069c:	2304      	movs	r3, #4
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f987 	bl	80019c0 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f9a8 	bl	8000a0c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f000 fe76 	bl	80013ac <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 f9a1 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 feaf 	bl	800144c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f98a 	bl	8000a0c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000744:	4a3c      	ldr	r2, [pc, #240]	; (8000838 <MX_TIM1_Init+0x130>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_TIM1_Init+0x12c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000756:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800075a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b35      	ldr	r3, [pc, #212]	; (8000834 <MX_TIM1_Init+0x12c>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <MX_TIM1_Init+0x12c>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076e:	4831      	ldr	r0, [pc, #196]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000770:	f001 fb80 	bl	8001e74 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800077a:	f000 f947 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000788:	4619      	mov	r1, r3
 800078a:	482a      	ldr	r0, [pc, #168]	; (8000834 <MX_TIM1_Init+0x12c>)
 800078c:	f001 fe10 	bl	80023b0 <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000796:	f000 f939 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <MX_TIM1_Init+0x12c>)
 800079c:	f001 fc08 	bl	8001fb0 <HAL_TIM_IC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80007a6:	f000 f931 	bl	8000a0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007aa:	2304      	movs	r3, #4
 80007ac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80007ae:	2360      	movs	r3, #96	; 0x60
 80007b0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_TIM1_Init+0x12c>)
 80007c2:	f001 feac 	bl	800251e <HAL_TIM_SlaveConfigSynchro>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007cc:	f000 f91e 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_TIM1_Init+0x12c>)
 80007e0:	f002 fba0 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80007ea:	f000 f90f 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_TIM1_Init+0x12c>)
 8000806:	f001 fc71 	bl	80020ec <HAL_TIM_IC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000810:	f000 f8fc 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2204      	movs	r2, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_TIM1_Init+0x12c>)
 800081c:	f001 fc66 	bl	80020ec <HAL_TIM_IC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000826:	f000 f8f1 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3740      	adds	r7, #64	; 0x40
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000e4 	.word	0x200000e4
 8000838:	40010000 	.word	0x40010000

0800083c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM10_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1-1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM10_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000868:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800086c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM10_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MX_TIM10_Init+0x94>)
 800087c:	f001 fafa 	bl	8001e74 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000886:	f000 f8c1 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_TIM10_Init+0x94>)
 800088c:	f001 fb1d 	bl	8001eca <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 f8b9 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 800089e:	2312      	movs	r3, #18
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008a6:	2304      	movs	r3, #4
 80008a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM10_Init+0x94>)
 80008b2:	f001 fcb7 	bl	8002224 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80008bc:	f000 f8a6 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM10_Init+0x94>)
 80008c2:	f000 f931 	bl	8000b28 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000009c 	.word	0x2000009c
 80008d4:	40014400 	.word	0x40014400

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f002 fb84 	bl	800301c <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f877 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000124 	.word	0x20000124
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <MX_GPIO_Init+0xd0>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a25      	ldr	r2, [pc, #148]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_GPIO_Init+0xd0>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0xd4>)
 80009b8:	f000 fcde 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_GPIO_Init+0xd8>)
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_GPIO_Init+0xdc>)
 80009d2:	f000 fb3f 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xd4>)
 80009ee:	f000 fb31 	bl	8001054 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	10210000 	.word	0x10210000
 8000a08:	40020800 	.word	0x40020800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fac6 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_TIM_Base_MspInit+0xac>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12d      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480f      	ldr	r0, [pc, #60]	; (8000b20 <HAL_TIM_Base_MspInit+0xb4>)
 8000ae4:	f000 fab6 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ae8:	e012      	b.n	8000b10 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM10)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_TIM_Base_MspInit+0xb8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d10d      	bne.n	8000b10 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_TIM_Base_MspInit+0xb0>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40014400 	.word	0x40014400

08000b28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_TIM_MspPostInit+0x68>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d11e      	bne.n	8000b88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_TIM_MspPostInit+0x70>)
 8000b84:	f000 fa66 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40014400 	.word	0x40014400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0x8c>)
 8000c12:	f000 fa1f 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f8c0 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x50>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x16>
		heap_end = &end;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <_sbrk+0x50>)
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <_sbrk+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <_sbrk+0x50>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <_sbrk+0x50>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	466a      	mov	r2, sp
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d907      	bls.n	8000cc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cb2:	f002 fe5f 	bl	8003974 <__errno>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	230c      	movs	r3, #12
 8000cba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc0:	e006      	b.n	8000cd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <_sbrk+0x50>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a03      	ldr	r2, [pc, #12]	; (8000cd8 <_sbrk+0x50>)
 8000ccc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000090 	.word	0x20000090
 8000cdc:	20000170 	.word	0x20000170

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SystemInit+0x28>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SystemInit+0x28>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SystemInit+0x28>)
 8000cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d12:	e003      	b.n	8000d1c <LoopCopyDataInit>

08000d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d1a:	3104      	adds	r1, #4

08000d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d24:	d3f6      	bcc.n	8000d14 <CopyDataInit>
  ldr  r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d28:	e002      	b.n	8000d30 <LoopFillZerobss>

08000d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d2c:	f842 3b04 	str.w	r3, [r2], #4

08000d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d34:	d3f9      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d36:	f7ff ffd3 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f002 fe21 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc37 	bl	80005b0 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d48:	08004260 	.word	0x08004260
  ldr  r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d50:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d54:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d58:	2000016c 	.word	0x2000016c

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f92f 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe42 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f939 	bl	800103a <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f000 f90f 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000164 	.word	0x20000164

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000164 	.word	0x20000164

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_Delay+0x40>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff47 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff5c 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffb0 	bl	8000fa8 <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e165      	b.n	800133c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8154 	bne.w	8001336 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d00b      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a2:	2b11      	cmp	r3, #17
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0xfc>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ae 	beq.w	8001336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a57      	ldr	r2, [pc, #348]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x304>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x308>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_GPIO_Init+0x30c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_GPIO_Init+0x310>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x20a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	; (800136c <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x206>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a48      	ldr	r2, [pc, #288]	; (8001370 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x202>
 8001252:	2306      	movs	r3, #6
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001256:	2307      	movs	r3, #7
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4934      	ldr	r1, [pc, #208]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_GPIO_Init+0x320>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b2:	4a30      	ldr	r2, [pc, #192]	; (8001374 <HAL_GPIO_Init+0x320>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <HAL_GPIO_Init+0x320>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_GPIO_Init+0x320>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_GPIO_Init+0x320>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_GPIO_Init+0x320>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_GPIO_Init+0x320>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001330:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_GPIO_Init+0x320>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae96 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_PWREx_EnableOverDrive+0x90>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_PWREx_EnableOverDrive+0x90>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_PWREx_EnableOverDrive+0x90>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_PWREx_EnableOverDrive+0x94>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff fd28 	bl	8000e2c <HAL_GetTick>
 80013dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013de:	e009      	b.n	80013f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013e0:	f7ff fd24 	bl	8000e2c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ee:	d901      	bls.n	80013f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e01f      	b.n	8001434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d1ee      	bne.n	80013e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff fd10 	bl	8000e2c <HAL_GetTick>
 800140c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800140e:	e009      	b.n	8001424 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001410:	f7ff fd0c 	bl	8000e2c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141e:	d901      	bls.n	8001424 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e007      	b.n	8001434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_PWREx_EnableOverDrive+0x98>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001430:	d1ee      	bne.n	8001410 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	420e0040 	.word	0x420e0040
 8001444:	40007000 	.word	0x40007000
 8001448:	420e0044 	.word	0x420e0044

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0cc      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d90c      	bls.n	8001488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b65      	ldr	r3, [pc, #404]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b63      	ldr	r3, [pc, #396]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b8      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4b59      	ldr	r3, [pc, #356]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a58      	ldr	r2, [pc, #352]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	494d      	ldr	r1, [pc, #308]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d044      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d119      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e07f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d003      	beq.n	800150a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	2b03      	cmp	r3, #3
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e06f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e067      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fc76 	bl	8000e2c <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fc72 	bl	8000e2c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e04f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e032      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4916      	ldr	r1, [pc, #88]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 f855 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 80015d6:	4601      	mov	r1, r0
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fbd6 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08004204 	.word	0x08004204
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4601      	mov	r1, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08004214 	.word	0x08004214

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffdc 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001660:	4601      	mov	r1, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0b5b      	lsrs	r3, r3, #13
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	08004214 	.word	0x08004214

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800169a:	4bc6      	ldr	r3, [pc, #792]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	f200 817e 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x324>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <HAL_RCC_GetSysClockFreq+0x30>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	080019a5 	.word	0x080019a5
 80016b8:	080019a5 	.word	0x080019a5
 80016bc:	080019a5 	.word	0x080019a5
 80016c0:	080016eb 	.word	0x080016eb
 80016c4:	080019a5 	.word	0x080019a5
 80016c8:	080019a5 	.word	0x080019a5
 80016cc:	080019a5 	.word	0x080019a5
 80016d0:	080016f1 	.word	0x080016f1
 80016d4:	080019a5 	.word	0x080019a5
 80016d8:	080019a5 	.word	0x080019a5
 80016dc:	080019a5 	.word	0x080019a5
 80016e0:	0800184d 	.word	0x0800184d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4bb4      	ldr	r3, [pc, #720]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x338>)
 80016e6:	613b      	str	r3, [r7, #16]
       break;
 80016e8:	e15f      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ea:	4bb4      	ldr	r3, [pc, #720]	; (80019bc <HAL_RCC_GetSysClockFreq+0x33c>)
 80016ec:	613b      	str	r3, [r7, #16]
      break;
 80016ee:	e15c      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fa:	4bae      	ldr	r3, [pc, #696]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d04a      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001706:	4bab      	ldr	r3, [pc, #684]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	099b      	lsrs	r3, r3, #6
 800170c:	f04f 0400 	mov.w	r4, #0
 8001710:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	ea03 0501 	and.w	r5, r3, r1
 800171c:	ea04 0602 	and.w	r6, r4, r2
 8001720:	4629      	mov	r1, r5
 8001722:	4632      	mov	r2, r6
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f04f 0400 	mov.w	r4, #0
 800172c:	0154      	lsls	r4, r2, #5
 800172e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	4619      	mov	r1, r3
 8001736:	4622      	mov	r2, r4
 8001738:	1b49      	subs	r1, r1, r5
 800173a:	eb62 0206 	sbc.w	r2, r2, r6
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f04f 0400 	mov.w	r4, #0
 8001746:	0194      	lsls	r4, r2, #6
 8001748:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800174c:	018b      	lsls	r3, r1, #6
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	eb64 0402 	sbc.w	r4, r4, r2
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	00e2      	lsls	r2, r4, #3
 800175e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001762:	00d9      	lsls	r1, r3, #3
 8001764:	460b      	mov	r3, r1
 8001766:	4614      	mov	r4, r2
 8001768:	195b      	adds	r3, r3, r5
 800176a:	eb44 0406 	adc.w	r4, r4, r6
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	0262      	lsls	r2, r4, #9
 8001778:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800177c:	0259      	lsls	r1, r3, #9
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	4618      	mov	r0, r3
 8001784:	4621      	mov	r1, r4
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f04f 0400 	mov.w	r4, #0
 800178c:	461a      	mov	r2, r3
 800178e:	4623      	mov	r3, r4
 8001790:	f7fe fd8e 	bl	80002b0 <__aeabi_uldivmod>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e049      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179c:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	f04f 0400 	mov.w	r4, #0
 80017a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	ea03 0501 	and.w	r5, r3, r1
 80017b2:	ea04 0602 	and.w	r6, r4, r2
 80017b6:	4629      	mov	r1, r5
 80017b8:	4632      	mov	r2, r6
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f04f 0400 	mov.w	r4, #0
 80017c2:	0154      	lsls	r4, r2, #5
 80017c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017c8:	014b      	lsls	r3, r1, #5
 80017ca:	4619      	mov	r1, r3
 80017cc:	4622      	mov	r2, r4
 80017ce:	1b49      	subs	r1, r1, r5
 80017d0:	eb62 0206 	sbc.w	r2, r2, r6
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	0194      	lsls	r4, r2, #6
 80017de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017e2:	018b      	lsls	r3, r1, #6
 80017e4:	1a5b      	subs	r3, r3, r1
 80017e6:	eb64 0402 	sbc.w	r4, r4, r2
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	00e2      	lsls	r2, r4, #3
 80017f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017f8:	00d9      	lsls	r1, r3, #3
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	195b      	adds	r3, r3, r5
 8001800:	eb44 0406 	adc.w	r4, r4, r6
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	02a2      	lsls	r2, r4, #10
 800180e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001812:	0299      	lsls	r1, r3, #10
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	461a      	mov	r2, r3
 8001824:	4623      	mov	r3, r4
 8001826:	f7fe fd43 	bl	80002b0 <__aeabi_uldivmod>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	613b      	str	r3, [r7, #16]
      break;
 800184a:	e0ae      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001854:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d04a      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	f04f 0400 	mov.w	r4, #0
 800186c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	ea03 0501 	and.w	r5, r3, r1
 8001878:	ea04 0602 	and.w	r6, r4, r2
 800187c:	4629      	mov	r1, r5
 800187e:	4632      	mov	r2, r6
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	f04f 0400 	mov.w	r4, #0
 8001888:	0154      	lsls	r4, r2, #5
 800188a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800188e:	014b      	lsls	r3, r1, #5
 8001890:	4619      	mov	r1, r3
 8001892:	4622      	mov	r2, r4
 8001894:	1b49      	subs	r1, r1, r5
 8001896:	eb62 0206 	sbc.w	r2, r2, r6
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	0194      	lsls	r4, r2, #6
 80018a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018a8:	018b      	lsls	r3, r1, #6
 80018aa:	1a5b      	subs	r3, r3, r1
 80018ac:	eb64 0402 	sbc.w	r4, r4, r2
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018be:	00d9      	lsls	r1, r3, #3
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	195b      	adds	r3, r3, r5
 80018c6:	eb44 0406 	adc.w	r4, r4, r6
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	0262      	lsls	r2, r4, #9
 80018d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018d8:	0259      	lsls	r1, r3, #9
 80018da:	460b      	mov	r3, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	f7fe fce0 	bl	80002b0 <__aeabi_uldivmod>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e049      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	ea03 0501 	and.w	r5, r3, r1
 800190e:	ea04 0602 	and.w	r6, r4, r2
 8001912:	4629      	mov	r1, r5
 8001914:	4632      	mov	r2, r6
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f04f 0400 	mov.w	r4, #0
 800191e:	0154      	lsls	r4, r2, #5
 8001920:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001924:	014b      	lsls	r3, r1, #5
 8001926:	4619      	mov	r1, r3
 8001928:	4622      	mov	r2, r4
 800192a:	1b49      	subs	r1, r1, r5
 800192c:	eb62 0206 	sbc.w	r2, r2, r6
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	0194      	lsls	r4, r2, #6
 800193a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	1a5b      	subs	r3, r3, r1
 8001942:	eb64 0402 	sbc.w	r4, r4, r2
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	00e2      	lsls	r2, r4, #3
 8001950:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001954:	00d9      	lsls	r1, r3, #3
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	195b      	adds	r3, r3, r5
 800195c:	eb44 0406 	adc.w	r4, r4, r6
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	02a2      	lsls	r2, r4, #10
 800196a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800196e:	0299      	lsls	r1, r3, #10
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f04f 0400 	mov.w	r4, #0
 800197e:	461a      	mov	r2, r3
 8001980:	4623      	mov	r3, r4
 8001982:	f7fe fc95 	bl	80002b0 <__aeabi_uldivmod>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0f1b      	lsrs	r3, r3, #28
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	613b      	str	r3, [r7, #16]
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x338>)
 80019a6:	613b      	str	r3, [r7, #16]
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	693b      	ldr	r3, [r7, #16]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8083 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019da:	4b95      	ldr	r3, [pc, #596]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d019      	beq.n	8001a1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e6:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f2:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a00:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0c:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d05b      	beq.n	8001ade <HAL_RCC_OscConfig+0x11e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d157      	bne.n	8001ade <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e216      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x8a>
 8001a3c:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a7b      	ldr	r2, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e01d      	b.n	8001a86 <HAL_RCC_OscConfig+0xc6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0xae>
 8001a54:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a75      	ldr	r2, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0xc6>
 8001a6e:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6f      	ldr	r2, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6c      	ldr	r2, [pc, #432]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d013      	beq.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f9cd 	bl	8000e2c <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a96:	f7ff f9c9 	bl	8000e2c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1db      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0xd6>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f9b9 	bl	8000e2c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abe:	f7ff f9b5 	bl	8000e2c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	; 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1c7      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0xfe>
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d06f      	beq.n	8001bcc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d017      	beq.n	8001b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af8:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d11c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d116      	bne.n	8001b56 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x180>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e18f      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4938      	ldr	r1, [pc, #224]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b54:	e03a      	b.n	8001bcc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d020      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f962 	bl	8000e2c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f95e 	bl	8000e2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e170      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4925      	ldr	r1, [pc, #148]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f941 	bl	8000e2c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff f93d 	bl	8000e2c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e14f      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d037      	beq.n	8001c48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d016      	beq.n	8001c0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_RCC_OscConfig+0x278>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f921 	bl	8000e2c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff f91d 	bl	8000e2c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e12f      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x22e>
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_OscConfig+0x278>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f90a 	bl	8000e2c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1a:	e00f      	b.n	8001c3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f906 	bl	8000e2c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d908      	bls.n	8001c3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e118      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470000 	.word	0x42470000
 8001c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e9      	bne.n	8001c1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8097 	beq.w	8001d84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a75      	ldr	r2, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f8c5 	bl	8000e2c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f8c1 	bl	8000e2c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0d3      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x31a>
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x354>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x33c>
 8001ce2:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a60      	ldr	r2, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x354>
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f886 	bl	8000e2c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f882 	bl	8000e2c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e092      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ee      	beq.n	8001d24 <HAL_RCC_OscConfig+0x364>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f870 	bl	8000e2c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f86c 	bl	8000e2c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e07c      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a3a      	ldr	r2, [pc, #232]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d068      	beq.n	8001e5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d060      	beq.n	8001e5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d145      	bne.n	8001e2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f841 	bl	8000e2c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f83d 	bl	8000e2c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e04f      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	3b01      	subs	r3, #1
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	061b      	lsls	r3, r3, #24
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	071b      	lsls	r3, r3, #28
 8001df8:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f812 	bl	8000e2c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f80e 	bl	8000e2c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e020      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x44c>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe fffb 	bl	8000e2c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe fff7 	bl	8000e2c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x4a8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x47a>
 8001e58:	e001      	b.n	8001e5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42470060 	.word	0x42470060

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e01d      	b.n	8001ec2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fde6 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 fb76 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e01d      	b.n	8001f18 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f815 	bl	8001f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f000 fb4b 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 ffc6 	bl	8002ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_TIM_PWM_Start+0x74>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_PWM_Start+0x2c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_TIM_PWM_Start+0x78>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_PWM_Start+0x30>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_TIM_PWM_Start+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d007      	beq.n	8001f9c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e01d      	b.n	8001ffe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f815 	bl	8002006 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 fad8 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d841      	bhi.n	80020b0 <HAL_TIM_IC_Start_IT+0x94>
 800202c:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <HAL_TIM_IC_Start_IT+0x18>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002069 	.word	0x08002069
 8002038:	080020b1 	.word	0x080020b1
 800203c:	080020b1 	.word	0x080020b1
 8002040:	080020b1 	.word	0x080020b1
 8002044:	0800207b 	.word	0x0800207b
 8002048:	080020b1 	.word	0x080020b1
 800204c:	080020b1 	.word	0x080020b1
 8002050:	080020b1 	.word	0x080020b1
 8002054:	0800208d 	.word	0x0800208d
 8002058:	080020b1 	.word	0x080020b1
 800205c:	080020b1 	.word	0x080020b1
 8002060:	080020b1 	.word	0x080020b1
 8002064:	0800209f 	.word	0x0800209f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0202 	orr.w	r2, r2, #2
 8002076:	60da      	str	r2, [r3, #12]
      break;
 8002078:	e01b      	b.n	80020b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0204 	orr.w	r2, r2, #4
 8002088:	60da      	str	r2, [r3, #12]
      break;
 800208a:	e012      	b.n	80020b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	60da      	str	r2, [r3, #12]
      break;
 800209c:	e009      	b.n	80020b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0210 	orr.w	r2, r2, #16
 80020ac:	60da      	str	r2, [r3, #12]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80020b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 ff0c 	bl	8002ed8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d007      	beq.n	80020e2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002102:	2302      	movs	r3, #2
 8002104:	e08a      	b.n	800221c <HAL_TIM_IC_ConfigChannel+0x130>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f000 fd10 	bl	8002b50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020c 	bic.w	r2, r2, #12
 800213e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6999      	ldr	r1, [r3, #24]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	619a      	str	r2, [r3, #24]
 8002152:	e05a      	b.n	800220a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d11c      	bne.n	8002194 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f000 fd94 	bl	8002c96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800217c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6999      	ldr	r1, [r3, #24]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	021a      	lsls	r2, r3, #8
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	619a      	str	r2, [r3, #24]
 8002192:	e03a      	b.n	800220a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11b      	bne.n	80021d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f000 fde1 	bl	8002d70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 020c 	bic.w	r2, r2, #12
 80021bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69d9      	ldr	r1, [r3, #28]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]
 80021d0:	e01b      	b.n	800220a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f000 fe01 	bl	8002de8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69d9      	ldr	r1, [r3, #28]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e0b4      	b.n	80023a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f200 809f 	bhi.w	8002394 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	08002291 	.word	0x08002291
 8002260:	08002395 	.word	0x08002395
 8002264:	08002395 	.word	0x08002395
 8002268:	08002395 	.word	0x08002395
 800226c:	080022d1 	.word	0x080022d1
 8002270:	08002395 	.word	0x08002395
 8002274:	08002395 	.word	0x08002395
 8002278:	08002395 	.word	0x08002395
 800227c:	08002313 	.word	0x08002313
 8002280:	08002395 	.word	0x08002395
 8002284:	08002395 	.word	0x08002395
 8002288:	08002395 	.word	0x08002395
 800228c:	08002353 	.word	0x08002353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fa24 	bl	80026e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6999      	ldr	r1, [r3, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	619a      	str	r2, [r3, #24]
      break;
 80022ce:	e062      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fa74 	bl	80027c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6999      	ldr	r1, [r3, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	021a      	lsls	r2, r3, #8
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
      break;
 8002310:	e041      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fac9 	bl	80028b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0208 	orr.w	r2, r2, #8
 800232c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69d9      	ldr	r1, [r3, #28]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	61da      	str	r2, [r3, #28]
      break;
 8002350:	e021      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fb1d 	bl	8002998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	021a      	lsls	r2, r3, #8
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	61da      	str	r2, [r3, #28]
      break;
 8002392:	e000      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002394:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x18>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0a6      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x166>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d067      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x120>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d80b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x6c>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d073      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d802      	bhi.n	8002412 <HAL_TIM_ConfigClockSource+0x62>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06f      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002410:	e078      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002412:	2b20      	cmp	r3, #32
 8002414:	d06c      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
 8002416:	2b30      	cmp	r3, #48	; 0x30
 8002418:	d06a      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800241a:	e073      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d00d      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x8c>
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d804      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x7e>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d033      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0xe0>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d041      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800242c:	e06a      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d066      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x152>
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d017      	beq.n	800246a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800243a:	e063      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f000 fd24 	bl	8002e98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800245e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]
      break;
 8002468:	e04c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f000 fd0d 	bl	8002e98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800248c:	609a      	str	r2, [r3, #8]
      break;
 800248e:	e039      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	461a      	mov	r2, r3
 800249e:	f000 fbcb 	bl	8002c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2150      	movs	r1, #80	; 0x50
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fcda 	bl	8002e62 <TIM_ITRx_SetConfig>
      break;
 80024ae:	e029      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	461a      	mov	r2, r3
 80024be:	f000 fc27 	bl	8002d10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2160      	movs	r1, #96	; 0x60
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fcca 	bl	8002e62 <TIM_ITRx_SetConfig>
      break;
 80024ce:	e019      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	f000 fbab 	bl	8002c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fcba 	bl	8002e62 <TIM_ITRx_SetConfig>
      break;
 80024ee:	e009      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 fcb1 	bl	8002e62 <TIM_ITRx_SetConfig>
      break;
 8002500:	e000      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002532:	2302      	movs	r3, #2
 8002534:	e031      	b.n	800259a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa7b 	bl	8002a44 <TIM_SlaveTimer_SetConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e018      	b.n	800259a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002576:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002586:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a40      	ldr	r2, [pc, #256]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d00f      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3d      	ldr	r2, [pc, #244]	; (80026bc <TIM_Base_SetConfig+0x118>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <TIM_Base_SetConfig+0x11c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <TIM_Base_SetConfig+0x120>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d027      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <TIM_Base_SetConfig+0x118>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d023      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <TIM_Base_SetConfig+0x11c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <TIM_Base_SetConfig+0x120>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d017      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <TIM_Base_SetConfig+0x128>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <TIM_Base_SetConfig+0x12c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <TIM_Base_SetConfig+0x130>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <TIM_Base_SetConfig+0x134>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <TIM_Base_SetConfig+0x138>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <TIM_Base_SetConfig+0x13c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0xf8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	615a      	str	r2, [r3, #20]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40010400 	.word	0x40010400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40014400 	.word	0x40014400
 80026d4:	40014800 	.word	0x40014800
 80026d8:	40001800 	.word	0x40001800
 80026dc:	40001c00 	.word	0x40001c00
 80026e0:	40002000 	.word	0x40002000

080026e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 0302 	bic.w	r3, r3, #2
 800272c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a20      	ldr	r2, [pc, #128]	; (80027bc <TIM_OC1_SetConfig+0xd8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_OC1_SetConfig+0x64>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <TIM_OC1_SetConfig+0xdc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10c      	bne.n	8002762 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0308 	bic.w	r3, r3, #8
 800274e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a15      	ldr	r2, [pc, #84]	; (80027bc <TIM_OC1_SetConfig+0xd8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_OC1_SetConfig+0x8e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <TIM_OC1_SetConfig+0xdc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d111      	bne.n	8002796 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40010400 	.word	0x40010400

080027c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f023 0210 	bic.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0320 	bic.w	r3, r3, #32
 800280e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <TIM_OC2_SetConfig+0xe4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_OC2_SetConfig+0x68>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <TIM_OC2_SetConfig+0xe8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10d      	bne.n	8002848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <TIM_OC2_SetConfig+0xe4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_OC2_SetConfig+0x94>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a16      	ldr	r2, [pc, #88]	; (80028ac <TIM_OC2_SetConfig+0xe8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d113      	bne.n	8002880 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40010000 	.word	0x40010000
 80028ac:	40010400 	.word	0x40010400

080028b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a21      	ldr	r2, [pc, #132]	; (8002990 <TIM_OC3_SetConfig+0xe0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_OC3_SetConfig+0x66>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <TIM_OC3_SetConfig+0xe4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10d      	bne.n	8002932 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800291c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <TIM_OC3_SetConfig+0xe0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d003      	beq.n	8002942 <TIM_OC3_SetConfig+0x92>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <TIM_OC3_SetConfig+0xe4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d113      	bne.n	800296a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	621a      	str	r2, [r3, #32]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40010000 	.word	0x40010000
 8002994:	40010400 	.word	0x40010400

08002998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <TIM_OC4_SetConfig+0xa4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_OC4_SetConfig+0x68>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a11      	ldr	r2, [pc, #68]	; (8002a40 <TIM_OC4_SetConfig+0xa8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d109      	bne.n	8002a14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40010400 	.word	0x40010400

08002a44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0307 	bic.w	r3, r3, #7
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b30      	cmp	r3, #48	; 0x30
 8002a88:	d05c      	beq.n	8002b44 <TIM_SlaveTimer_SetConfig+0x100>
 8002a8a:	2b30      	cmp	r3, #48	; 0x30
 8002a8c:	d806      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x58>
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d058      	beq.n	8002b44 <TIM_SlaveTimer_SetConfig+0x100>
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d056      	beq.n	8002b44 <TIM_SlaveTimer_SetConfig+0x100>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d054      	beq.n	8002b44 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002a9a:	e054      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002a9c:	2b50      	cmp	r3, #80	; 0x50
 8002a9e:	d03d      	beq.n	8002b1c <TIM_SlaveTimer_SetConfig+0xd8>
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d802      	bhi.n	8002aaa <TIM_SlaveTimer_SetConfig+0x66>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d010      	beq.n	8002aca <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8002aa8:	e04d      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002aaa:	2b60      	cmp	r3, #96	; 0x60
 8002aac:	d040      	beq.n	8002b30 <TIM_SlaveTimer_SetConfig+0xec>
 8002aae:	2b70      	cmp	r3, #112	; 0x70
 8002ab0:	d000      	beq.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8002ab2:	e048      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68d9      	ldr	r1, [r3, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f000 f9e8 	bl	8002e98 <TIM_ETR_SetConfig>
      break;
 8002ac8:	e03d      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d101      	bne.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e038      	b.n	8002b48 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
      break;
 8002b1a:	e014      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f000 f885 	bl	8002c38 <TIM_TI1_ConfigInputStage>
      break;
 8002b2e:	e00a      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f000 f8e7 	bl	8002d10 <TIM_TI2_ConfigInputStage>
      break;
 8002b42:	e000      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8002b44:	bf00      	nop
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0201 	bic.w	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <TIM_TI1_SetConfig+0xcc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01b      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d017      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <TIM_TI1_SetConfig+0xd0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <TIM_TI1_SetConfig+0xd4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <TIM_TI1_SetConfig+0xd8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_TI1_SetConfig+0xdc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <TIM_TI1_SetConfig+0xe0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_TI1_SetConfig+0x66>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <TIM_TI1_SetConfig+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <TIM_TI1_SetConfig+0x6a>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <TIM_TI1_SetConfig+0x6c>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e003      	b.n	8002bda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f023 030a 	bic.w	r3, r3, #10
 8002bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 030a 	and.w	r3, r3, #10
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40001800 	.word	0x40001800

08002c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 030a 	bic.w	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 0210 	bic.w	r2, r3, #16
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	031b      	lsls	r3, r3, #12
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	621a      	str	r2, [r3, #32]
}
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	031b      	lsls	r3, r3, #12
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 0303 	bic.w	r3, r3, #3
 8002d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	031b      	lsls	r3, r3, #12
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f043 0307 	orr.w	r3, r3, #7
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	609a      	str	r2, [r3, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	021a      	lsls	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2201      	movs	r2, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e05a      	b.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d01d      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40010400 	.word	0x40010400
 8003014:	40014000 	.word	0x40014000
 8003018:	40001800 	.word	0x40001800

0800301c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e03f      	b.n	80030ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fdaa 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f90b 	bl	800327c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b088      	sub	sp, #32
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 8083 	bne.w	80031de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Transmit+0x2e>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e07b      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Transmit+0x40>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e074      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2221      	movs	r2, #33	; 0x21
 8003108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800310c:	f7fd fe8e 	bl	8000e2c <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003126:	e042      	b.n	80031ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	d122      	bne.n	8003186 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2200      	movs	r2, #0
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f84c 	bl	80031e8 <UART_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e042      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3302      	adds	r3, #2
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	e017      	b.n	80031ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	e013      	b.n	80031ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f829 	bl	80031e8 <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e01f      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1b7      	bne.n	8003128 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f810 	bl	80031e8 <UART_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e006      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	e02c      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003200:	d028      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x30>
 8003208:	f7fd fe10 	bl	8000e2c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d21d      	bcs.n	8003254 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003226:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e00f      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	429a      	cmp	r2, r3
 8003270:	d0c3      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032be:	f023 030c 	bic.w	r3, r3, #12
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ea:	f040 818b 	bne.w	8003604 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4ac1      	ldr	r2, [pc, #772]	; (80035f8 <UART_SetConfig+0x37c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d005      	beq.n	8003304 <UART_SetConfig+0x88>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4abf      	ldr	r2, [pc, #764]	; (80035fc <UART_SetConfig+0x380>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	f040 80bd 	bne.w	800347e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7fe f9a8 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8003308:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	461d      	mov	r5, r3
 800330e:	f04f 0600 	mov.w	r6, #0
 8003312:	46a8      	mov	r8, r5
 8003314:	46b1      	mov	r9, r6
 8003316:	eb18 0308 	adds.w	r3, r8, r8
 800331a:	eb49 0409 	adc.w	r4, r9, r9
 800331e:	4698      	mov	r8, r3
 8003320:	46a1      	mov	r9, r4
 8003322:	eb18 0805 	adds.w	r8, r8, r5
 8003326:	eb49 0906 	adc.w	r9, r9, r6
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003336:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800333a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800333e:	4688      	mov	r8, r1
 8003340:	4691      	mov	r9, r2
 8003342:	eb18 0005 	adds.w	r0, r8, r5
 8003346:	eb49 0106 	adc.w	r1, r9, r6
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	461d      	mov	r5, r3
 8003350:	f04f 0600 	mov.w	r6, #0
 8003354:	196b      	adds	r3, r5, r5
 8003356:	eb46 0406 	adc.w	r4, r6, r6
 800335a:	461a      	mov	r2, r3
 800335c:	4623      	mov	r3, r4
 800335e:	f7fc ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	461a      	mov	r2, r3
 8003368:	4ba5      	ldr	r3, [pc, #660]	; (8003600 <UART_SetConfig+0x384>)
 800336a:	fba3 2302 	umull	r2, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	461d      	mov	r5, r3
 8003378:	f04f 0600 	mov.w	r6, #0
 800337c:	46a9      	mov	r9, r5
 800337e:	46b2      	mov	sl, r6
 8003380:	eb19 0309 	adds.w	r3, r9, r9
 8003384:	eb4a 040a 	adc.w	r4, sl, sl
 8003388:	4699      	mov	r9, r3
 800338a:	46a2      	mov	sl, r4
 800338c:	eb19 0905 	adds.w	r9, r9, r5
 8003390:	eb4a 0a06 	adc.w	sl, sl, r6
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a8:	4689      	mov	r9, r1
 80033aa:	4692      	mov	sl, r2
 80033ac:	eb19 0005 	adds.w	r0, r9, r5
 80033b0:	eb4a 0106 	adc.w	r1, sl, r6
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	461d      	mov	r5, r3
 80033ba:	f04f 0600 	mov.w	r6, #0
 80033be:	196b      	adds	r3, r5, r5
 80033c0:	eb46 0406 	adc.w	r4, r6, r6
 80033c4:	461a      	mov	r2, r3
 80033c6:	4623      	mov	r3, r4
 80033c8:	f7fc ff72 	bl	80002b0 <__aeabi_uldivmod>
 80033cc:	4603      	mov	r3, r0
 80033ce:	460c      	mov	r4, r1
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <UART_SetConfig+0x384>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	; 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	; 0x32
 80033e6:	4a86      	ldr	r2, [pc, #536]	; (8003600 <UART_SetConfig+0x384>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033f4:	4498      	add	r8, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	461d      	mov	r5, r3
 80033fa:	f04f 0600 	mov.w	r6, #0
 80033fe:	46a9      	mov	r9, r5
 8003400:	46b2      	mov	sl, r6
 8003402:	eb19 0309 	adds.w	r3, r9, r9
 8003406:	eb4a 040a 	adc.w	r4, sl, sl
 800340a:	4699      	mov	r9, r3
 800340c:	46a2      	mov	sl, r4
 800340e:	eb19 0905 	adds.w	r9, r9, r5
 8003412:	eb4a 0a06 	adc.w	sl, sl, r6
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800342a:	4689      	mov	r9, r1
 800342c:	4692      	mov	sl, r2
 800342e:	eb19 0005 	adds.w	r0, r9, r5
 8003432:	eb4a 0106 	adc.w	r1, sl, r6
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	461d      	mov	r5, r3
 800343c:	f04f 0600 	mov.w	r6, #0
 8003440:	196b      	adds	r3, r5, r5
 8003442:	eb46 0406 	adc.w	r4, r6, r6
 8003446:	461a      	mov	r2, r3
 8003448:	4623      	mov	r3, r4
 800344a:	f7fc ff31 	bl	80002b0 <__aeabi_uldivmod>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	461a      	mov	r2, r3
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <UART_SetConfig+0x384>)
 8003456:	fba3 1302 	umull	r1, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2164      	movs	r1, #100	; 0x64
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a65      	ldr	r2, [pc, #404]	; (8003600 <UART_SetConfig+0x384>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 0207 	and.w	r2, r3, #7
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4442      	add	r2, r8
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	e26f      	b.n	800395e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800347e:	f7fe f8d7 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8003482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	461d      	mov	r5, r3
 8003488:	f04f 0600 	mov.w	r6, #0
 800348c:	46a8      	mov	r8, r5
 800348e:	46b1      	mov	r9, r6
 8003490:	eb18 0308 	adds.w	r3, r8, r8
 8003494:	eb49 0409 	adc.w	r4, r9, r9
 8003498:	4698      	mov	r8, r3
 800349a:	46a1      	mov	r9, r4
 800349c:	eb18 0805 	adds.w	r8, r8, r5
 80034a0:	eb49 0906 	adc.w	r9, r9, r6
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034b8:	4688      	mov	r8, r1
 80034ba:	4691      	mov	r9, r2
 80034bc:	eb18 0005 	adds.w	r0, r8, r5
 80034c0:	eb49 0106 	adc.w	r1, r9, r6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	461d      	mov	r5, r3
 80034ca:	f04f 0600 	mov.w	r6, #0
 80034ce:	196b      	adds	r3, r5, r5
 80034d0:	eb46 0406 	adc.w	r4, r6, r6
 80034d4:	461a      	mov	r2, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	f7fc feea 	bl	80002b0 <__aeabi_uldivmod>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <UART_SetConfig+0x384>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	461d      	mov	r5, r3
 80034f2:	f04f 0600 	mov.w	r6, #0
 80034f6:	46a9      	mov	r9, r5
 80034f8:	46b2      	mov	sl, r6
 80034fa:	eb19 0309 	adds.w	r3, r9, r9
 80034fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003502:	4699      	mov	r9, r3
 8003504:	46a2      	mov	sl, r4
 8003506:	eb19 0905 	adds.w	r9, r9, r5
 800350a:	eb4a 0a06 	adc.w	sl, sl, r6
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800351a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800351e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003522:	4689      	mov	r9, r1
 8003524:	4692      	mov	sl, r2
 8003526:	eb19 0005 	adds.w	r0, r9, r5
 800352a:	eb4a 0106 	adc.w	r1, sl, r6
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	461d      	mov	r5, r3
 8003534:	f04f 0600 	mov.w	r6, #0
 8003538:	196b      	adds	r3, r5, r5
 800353a:	eb46 0406 	adc.w	r4, r6, r6
 800353e:	461a      	mov	r2, r3
 8003540:	4623      	mov	r3, r4
 8003542:	f7fc feb5 	bl	80002b0 <__aeabi_uldivmod>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	461a      	mov	r2, r3
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <UART_SetConfig+0x384>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <UART_SetConfig+0x384>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800356e:	4498      	add	r8, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	461d      	mov	r5, r3
 8003574:	f04f 0600 	mov.w	r6, #0
 8003578:	46a9      	mov	r9, r5
 800357a:	46b2      	mov	sl, r6
 800357c:	eb19 0309 	adds.w	r3, r9, r9
 8003580:	eb4a 040a 	adc.w	r4, sl, sl
 8003584:	4699      	mov	r9, r3
 8003586:	46a2      	mov	sl, r4
 8003588:	eb19 0905 	adds.w	r9, r9, r5
 800358c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035a4:	4689      	mov	r9, r1
 80035a6:	4692      	mov	sl, r2
 80035a8:	eb19 0005 	adds.w	r0, r9, r5
 80035ac:	eb4a 0106 	adc.w	r1, sl, r6
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	461d      	mov	r5, r3
 80035b6:	f04f 0600 	mov.w	r6, #0
 80035ba:	196b      	adds	r3, r5, r5
 80035bc:	eb46 0406 	adc.w	r4, r6, r6
 80035c0:	461a      	mov	r2, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	f7fc fe74 	bl	80002b0 <__aeabi_uldivmod>
 80035c8:	4603      	mov	r3, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <UART_SetConfig+0x384>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <UART_SetConfig+0x384>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 0207 	and.w	r2, r3, #7
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4442      	add	r2, r8
 80035f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035f6:	e1b2      	b.n	800395e <UART_SetConfig+0x6e2>
 80035f8:	40011000 	.word	0x40011000
 80035fc:	40011400 	.word	0x40011400
 8003600:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4ad7      	ldr	r2, [pc, #860]	; (8003968 <UART_SetConfig+0x6ec>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d005      	beq.n	800361a <UART_SetConfig+0x39e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4ad6      	ldr	r2, [pc, #856]	; (800396c <UART_SetConfig+0x6f0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	f040 80d1 	bne.w	80037bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800361a:	f7fe f81d 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 800361e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	469a      	mov	sl, r3
 8003624:	f04f 0b00 	mov.w	fp, #0
 8003628:	46d0      	mov	r8, sl
 800362a:	46d9      	mov	r9, fp
 800362c:	eb18 0308 	adds.w	r3, r8, r8
 8003630:	eb49 0409 	adc.w	r4, r9, r9
 8003634:	4698      	mov	r8, r3
 8003636:	46a1      	mov	r9, r4
 8003638:	eb18 080a 	adds.w	r8, r8, sl
 800363c:	eb49 090b 	adc.w	r9, r9, fp
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800364c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003650:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003654:	4688      	mov	r8, r1
 8003656:	4691      	mov	r9, r2
 8003658:	eb1a 0508 	adds.w	r5, sl, r8
 800365c:	eb4b 0609 	adc.w	r6, fp, r9
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4619      	mov	r1, r3
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	f04f 0400 	mov.w	r4, #0
 8003672:	0094      	lsls	r4, r2, #2
 8003674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003678:	008b      	lsls	r3, r1, #2
 800367a:	461a      	mov	r2, r3
 800367c:	4623      	mov	r3, r4
 800367e:	4628      	mov	r0, r5
 8003680:	4631      	mov	r1, r6
 8003682:	f7fc fe15 	bl	80002b0 <__aeabi_uldivmod>
 8003686:	4603      	mov	r3, r0
 8003688:	460c      	mov	r4, r1
 800368a:	461a      	mov	r2, r3
 800368c:	4bb8      	ldr	r3, [pc, #736]	; (8003970 <UART_SetConfig+0x6f4>)
 800368e:	fba3 2302 	umull	r2, r3, r3, r2
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	469b      	mov	fp, r3
 800369c:	f04f 0c00 	mov.w	ip, #0
 80036a0:	46d9      	mov	r9, fp
 80036a2:	46e2      	mov	sl, ip
 80036a4:	eb19 0309 	adds.w	r3, r9, r9
 80036a8:	eb4a 040a 	adc.w	r4, sl, sl
 80036ac:	4699      	mov	r9, r3
 80036ae:	46a2      	mov	sl, r4
 80036b0:	eb19 090b 	adds.w	r9, r9, fp
 80036b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036cc:	4689      	mov	r9, r1
 80036ce:	4692      	mov	sl, r2
 80036d0:	eb1b 0509 	adds.w	r5, fp, r9
 80036d4:	eb4c 060a 	adc.w	r6, ip, sl
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	f04f 0400 	mov.w	r4, #0
 80036ea:	0094      	lsls	r4, r2, #2
 80036ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036f0:	008b      	lsls	r3, r1, #2
 80036f2:	461a      	mov	r2, r3
 80036f4:	4623      	mov	r3, r4
 80036f6:	4628      	mov	r0, r5
 80036f8:	4631      	mov	r1, r6
 80036fa:	f7fc fdd9 	bl	80002b0 <__aeabi_uldivmod>
 80036fe:	4603      	mov	r3, r0
 8003700:	460c      	mov	r4, r1
 8003702:	461a      	mov	r2, r3
 8003704:	4b9a      	ldr	r3, [pc, #616]	; (8003970 <UART_SetConfig+0x6f4>)
 8003706:	fba3 1302 	umull	r1, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2164      	movs	r1, #100	; 0x64
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a95      	ldr	r2, [pc, #596]	; (8003970 <UART_SetConfig+0x6f4>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	4498      	add	r8, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	469b      	mov	fp, r3
 800372a:	f04f 0c00 	mov.w	ip, #0
 800372e:	46d9      	mov	r9, fp
 8003730:	46e2      	mov	sl, ip
 8003732:	eb19 0309 	adds.w	r3, r9, r9
 8003736:	eb4a 040a 	adc.w	r4, sl, sl
 800373a:	4699      	mov	r9, r3
 800373c:	46a2      	mov	sl, r4
 800373e:	eb19 090b 	adds.w	r9, r9, fp
 8003742:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003752:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003756:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800375a:	4689      	mov	r9, r1
 800375c:	4692      	mov	sl, r2
 800375e:	eb1b 0509 	adds.w	r5, fp, r9
 8003762:	eb4c 060a 	adc.w	r6, ip, sl
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4619      	mov	r1, r3
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	0094      	lsls	r4, r2, #2
 800377a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800377e:	008b      	lsls	r3, r1, #2
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	4628      	mov	r0, r5
 8003786:	4631      	mov	r1, r6
 8003788:	f7fc fd92 	bl	80002b0 <__aeabi_uldivmod>
 800378c:	4603      	mov	r3, r0
 800378e:	460c      	mov	r4, r1
 8003790:	461a      	mov	r2, r3
 8003792:	4b77      	ldr	r3, [pc, #476]	; (8003970 <UART_SetConfig+0x6f4>)
 8003794:	fba3 1302 	umull	r1, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2164      	movs	r1, #100	; 0x64
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	3332      	adds	r3, #50	; 0x32
 80037a6:	4a72      	ldr	r2, [pc, #456]	; (8003970 <UART_SetConfig+0x6f4>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4442      	add	r2, r8
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	e0d0      	b.n	800395e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fd ff38 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	469a      	mov	sl, r3
 80037c6:	f04f 0b00 	mov.w	fp, #0
 80037ca:	46d0      	mov	r8, sl
 80037cc:	46d9      	mov	r9, fp
 80037ce:	eb18 0308 	adds.w	r3, r8, r8
 80037d2:	eb49 0409 	adc.w	r4, r9, r9
 80037d6:	4698      	mov	r8, r3
 80037d8:	46a1      	mov	r9, r4
 80037da:	eb18 080a 	adds.w	r8, r8, sl
 80037de:	eb49 090b 	adc.w	r9, r9, fp
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037f6:	4688      	mov	r8, r1
 80037f8:	4691      	mov	r9, r2
 80037fa:	eb1a 0508 	adds.w	r5, sl, r8
 80037fe:	eb4b 0609 	adc.w	r6, fp, r9
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4619      	mov	r1, r3
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	f04f 0400 	mov.w	r4, #0
 8003814:	0094      	lsls	r4, r2, #2
 8003816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	461a      	mov	r2, r3
 800381e:	4623      	mov	r3, r4
 8003820:	4628      	mov	r0, r5
 8003822:	4631      	mov	r1, r6
 8003824:	f7fc fd44 	bl	80002b0 <__aeabi_uldivmod>
 8003828:	4603      	mov	r3, r0
 800382a:	460c      	mov	r4, r1
 800382c:	461a      	mov	r2, r3
 800382e:	4b50      	ldr	r3, [pc, #320]	; (8003970 <UART_SetConfig+0x6f4>)
 8003830:	fba3 2302 	umull	r2, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	469b      	mov	fp, r3
 800383e:	f04f 0c00 	mov.w	ip, #0
 8003842:	46d9      	mov	r9, fp
 8003844:	46e2      	mov	sl, ip
 8003846:	eb19 0309 	adds.w	r3, r9, r9
 800384a:	eb4a 040a 	adc.w	r4, sl, sl
 800384e:	4699      	mov	r9, r3
 8003850:	46a2      	mov	sl, r4
 8003852:	eb19 090b 	adds.w	r9, r9, fp
 8003856:	eb4a 0a0c 	adc.w	sl, sl, ip
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800386a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800386e:	4689      	mov	r9, r1
 8003870:	4692      	mov	sl, r2
 8003872:	eb1b 0509 	adds.w	r5, fp, r9
 8003876:	eb4c 060a 	adc.w	r6, ip, sl
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4619      	mov	r1, r3
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	f04f 0400 	mov.w	r4, #0
 800388c:	0094      	lsls	r4, r2, #2
 800388e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003892:	008b      	lsls	r3, r1, #2
 8003894:	461a      	mov	r2, r3
 8003896:	4623      	mov	r3, r4
 8003898:	4628      	mov	r0, r5
 800389a:	4631      	mov	r1, r6
 800389c:	f7fc fd08 	bl	80002b0 <__aeabi_uldivmod>
 80038a0:	4603      	mov	r3, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <UART_SetConfig+0x6f4>)
 80038a8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2164      	movs	r1, #100	; 0x64
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3332      	adds	r3, #50	; 0x32
 80038ba:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <UART_SetConfig+0x6f4>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c6:	4498      	add	r8, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	469b      	mov	fp, r3
 80038cc:	f04f 0c00 	mov.w	ip, #0
 80038d0:	46d9      	mov	r9, fp
 80038d2:	46e2      	mov	sl, ip
 80038d4:	eb19 0309 	adds.w	r3, r9, r9
 80038d8:	eb4a 040a 	adc.w	r4, sl, sl
 80038dc:	4699      	mov	r9, r3
 80038de:	46a2      	mov	sl, r4
 80038e0:	eb19 090b 	adds.w	r9, r9, fp
 80038e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038fc:	4689      	mov	r9, r1
 80038fe:	4692      	mov	sl, r2
 8003900:	eb1b 0509 	adds.w	r5, fp, r9
 8003904:	eb4c 060a 	adc.w	r6, ip, sl
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4619      	mov	r1, r3
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f04f 0400 	mov.w	r4, #0
 800391a:	0094      	lsls	r4, r2, #2
 800391c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003920:	008b      	lsls	r3, r1, #2
 8003922:	461a      	mov	r2, r3
 8003924:	4623      	mov	r3, r4
 8003926:	4628      	mov	r0, r5
 8003928:	4631      	mov	r1, r6
 800392a:	f7fc fcc1 	bl	80002b0 <__aeabi_uldivmod>
 800392e:	4603      	mov	r3, r0
 8003930:	460c      	mov	r4, r1
 8003932:	461a      	mov	r2, r3
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <UART_SetConfig+0x6f4>)
 8003936:	fba3 1302 	umull	r1, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2164      	movs	r1, #100	; 0x64
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	3332      	adds	r3, #50	; 0x32
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <UART_SetConfig+0x6f4>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4442      	add	r2, r8
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	e7ff      	b.n	800395e <UART_SetConfig+0x6e2>
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f

08003974 <__errno>:
 8003974:	4b01      	ldr	r3, [pc, #4]	; (800397c <__errno+0x8>)
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000000c 	.word	0x2000000c

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4e0d      	ldr	r6, [pc, #52]	; (80039b8 <__libc_init_array+0x38>)
 8003984:	4c0d      	ldr	r4, [pc, #52]	; (80039bc <__libc_init_array+0x3c>)
 8003986:	1ba4      	subs	r4, r4, r6
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	2500      	movs	r5, #0
 800398c:	42a5      	cmp	r5, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	4e0b      	ldr	r6, [pc, #44]	; (80039c0 <__libc_init_array+0x40>)
 8003992:	4c0c      	ldr	r4, [pc, #48]	; (80039c4 <__libc_init_array+0x44>)
 8003994:	f000 fc26 	bl	80041e4 <_init>
 8003998:	1ba4      	subs	r4, r4, r6
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	2500      	movs	r5, #0
 800399e:	42a5      	cmp	r5, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a8:	4798      	blx	r3
 80039aa:	3501      	adds	r5, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039b2:	4798      	blx	r3
 80039b4:	3501      	adds	r5, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	08004258 	.word	0x08004258
 80039bc:	08004258 	.word	0x08004258
 80039c0:	08004258 	.word	0x08004258
 80039c4:	0800425c 	.word	0x0800425c

080039c8 <memset>:
 80039c8:	4402      	add	r2, r0
 80039ca:	4603      	mov	r3, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <siprintf>:
 80039d8:	b40e      	push	{r1, r2, r3}
 80039da:	b500      	push	{lr}
 80039dc:	b09c      	sub	sp, #112	; 0x70
 80039de:	ab1d      	add	r3, sp, #116	; 0x74
 80039e0:	9002      	str	r0, [sp, #8]
 80039e2:	9006      	str	r0, [sp, #24]
 80039e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039e8:	4809      	ldr	r0, [pc, #36]	; (8003a10 <siprintf+0x38>)
 80039ea:	9107      	str	r1, [sp, #28]
 80039ec:	9104      	str	r1, [sp, #16]
 80039ee:	4909      	ldr	r1, [pc, #36]	; (8003a14 <siprintf+0x3c>)
 80039f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f4:	9105      	str	r1, [sp, #20]
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	a902      	add	r1, sp, #8
 80039fc:	f000 f866 	bl	8003acc <_svfiprintf_r>
 8003a00:	9b02      	ldr	r3, [sp, #8]
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	b01c      	add	sp, #112	; 0x70
 8003a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a0c:	b003      	add	sp, #12
 8003a0e:	4770      	bx	lr
 8003a10:	2000000c 	.word	0x2000000c
 8003a14:	ffff0208 	.word	0xffff0208

08003a18 <__ssputs_r>:
 8003a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a1c:	688e      	ldr	r6, [r1, #8]
 8003a1e:	429e      	cmp	r6, r3
 8003a20:	4682      	mov	sl, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	d837      	bhi.n	8003a9a <__ssputs_r+0x82>
 8003a2a:	898a      	ldrh	r2, [r1, #12]
 8003a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a30:	d031      	beq.n	8003a96 <__ssputs_r+0x7e>
 8003a32:	6825      	ldr	r5, [r4, #0]
 8003a34:	6909      	ldr	r1, [r1, #16]
 8003a36:	1a6f      	subs	r7, r5, r1
 8003a38:	6965      	ldr	r5, [r4, #20]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a40:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a44:	f109 0301 	add.w	r3, r9, #1
 8003a48:	443b      	add	r3, r7
 8003a4a:	429d      	cmp	r5, r3
 8003a4c:	bf38      	it	cc
 8003a4e:	461d      	movcc	r5, r3
 8003a50:	0553      	lsls	r3, r2, #21
 8003a52:	d530      	bpl.n	8003ab6 <__ssputs_r+0x9e>
 8003a54:	4629      	mov	r1, r5
 8003a56:	f000 fb2b 	bl	80040b0 <_malloc_r>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	b950      	cbnz	r0, 8003a74 <__ssputs_r+0x5c>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	f8ca 3000 	str.w	r3, [sl]
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	463a      	mov	r2, r7
 8003a76:	6921      	ldr	r1, [r4, #16]
 8003a78:	f000 faa8 	bl	8003fcc <memcpy>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	81a3      	strh	r3, [r4, #12]
 8003a88:	6126      	str	r6, [r4, #16]
 8003a8a:	6165      	str	r5, [r4, #20]
 8003a8c:	443e      	add	r6, r7
 8003a8e:	1bed      	subs	r5, r5, r7
 8003a90:	6026      	str	r6, [r4, #0]
 8003a92:	60a5      	str	r5, [r4, #8]
 8003a94:	464e      	mov	r6, r9
 8003a96:	454e      	cmp	r6, r9
 8003a98:	d900      	bls.n	8003a9c <__ssputs_r+0x84>
 8003a9a:	464e      	mov	r6, r9
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	f000 fa9e 	bl	8003fe2 <memmove>
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	1b9b      	subs	r3, r3, r6
 8003aaa:	60a3      	str	r3, [r4, #8]
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	441e      	add	r6, r3
 8003ab0:	6026      	str	r6, [r4, #0]
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e7dc      	b.n	8003a70 <__ssputs_r+0x58>
 8003ab6:	462a      	mov	r2, r5
 8003ab8:	f000 fb54 	bl	8004164 <_realloc_r>
 8003abc:	4606      	mov	r6, r0
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d1e2      	bne.n	8003a88 <__ssputs_r+0x70>
 8003ac2:	6921      	ldr	r1, [r4, #16]
 8003ac4:	4650      	mov	r0, sl
 8003ac6:	f000 faa5 	bl	8004014 <_free_r>
 8003aca:	e7c8      	b.n	8003a5e <__ssputs_r+0x46>

08003acc <_svfiprintf_r>:
 8003acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	898b      	ldrh	r3, [r1, #12]
 8003ad4:	061f      	lsls	r7, r3, #24
 8003ad6:	b09d      	sub	sp, #116	; 0x74
 8003ad8:	4680      	mov	r8, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4616      	mov	r6, r2
 8003ade:	d50f      	bpl.n	8003b00 <_svfiprintf_r+0x34>
 8003ae0:	690b      	ldr	r3, [r1, #16]
 8003ae2:	b96b      	cbnz	r3, 8003b00 <_svfiprintf_r+0x34>
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	f000 fae3 	bl	80040b0 <_malloc_r>
 8003aea:	6020      	str	r0, [r4, #0]
 8003aec:	6120      	str	r0, [r4, #16]
 8003aee:	b928      	cbnz	r0, 8003afc <_svfiprintf_r+0x30>
 8003af0:	230c      	movs	r3, #12
 8003af2:	f8c8 3000 	str.w	r3, [r8]
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003afa:	e0c8      	b.n	8003c8e <_svfiprintf_r+0x1c2>
 8003afc:	2340      	movs	r3, #64	; 0x40
 8003afe:	6163      	str	r3, [r4, #20]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9309      	str	r3, [sp, #36]	; 0x24
 8003b04:	2320      	movs	r3, #32
 8003b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0a:	2330      	movs	r3, #48	; 0x30
 8003b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b10:	9503      	str	r5, [sp, #12]
 8003b12:	f04f 0b01 	mov.w	fp, #1
 8003b16:	4637      	mov	r7, r6
 8003b18:	463d      	mov	r5, r7
 8003b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b1e:	b10b      	cbz	r3, 8003b24 <_svfiprintf_r+0x58>
 8003b20:	2b25      	cmp	r3, #37	; 0x25
 8003b22:	d13e      	bne.n	8003ba2 <_svfiprintf_r+0xd6>
 8003b24:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b28:	d00b      	beq.n	8003b42 <_svfiprintf_r+0x76>
 8003b2a:	4653      	mov	r3, sl
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4640      	mov	r0, r8
 8003b32:	f7ff ff71 	bl	8003a18 <__ssputs_r>
 8003b36:	3001      	adds	r0, #1
 8003b38:	f000 80a4 	beq.w	8003c84 <_svfiprintf_r+0x1b8>
 8003b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3e:	4453      	add	r3, sl
 8003b40:	9309      	str	r3, [sp, #36]	; 0x24
 8003b42:	783b      	ldrb	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 809d 	beq.w	8003c84 <_svfiprintf_r+0x1b8>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	9307      	str	r3, [sp, #28]
 8003b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b5e:	462f      	mov	r7, r5
 8003b60:	2205      	movs	r2, #5
 8003b62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b66:	4850      	ldr	r0, [pc, #320]	; (8003ca8 <_svfiprintf_r+0x1dc>)
 8003b68:	f7fc fb52 	bl	8000210 <memchr>
 8003b6c:	9b04      	ldr	r3, [sp, #16]
 8003b6e:	b9d0      	cbnz	r0, 8003ba6 <_svfiprintf_r+0xda>
 8003b70:	06d9      	lsls	r1, r3, #27
 8003b72:	bf44      	itt	mi
 8003b74:	2220      	movmi	r2, #32
 8003b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b7a:	071a      	lsls	r2, r3, #28
 8003b7c:	bf44      	itt	mi
 8003b7e:	222b      	movmi	r2, #43	; 0x2b
 8003b80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b84:	782a      	ldrb	r2, [r5, #0]
 8003b86:	2a2a      	cmp	r2, #42	; 0x2a
 8003b88:	d015      	beq.n	8003bb6 <_svfiprintf_r+0xea>
 8003b8a:	9a07      	ldr	r2, [sp, #28]
 8003b8c:	462f      	mov	r7, r5
 8003b8e:	2000      	movs	r0, #0
 8003b90:	250a      	movs	r5, #10
 8003b92:	4639      	mov	r1, r7
 8003b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b98:	3b30      	subs	r3, #48	; 0x30
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	d94d      	bls.n	8003c3a <_svfiprintf_r+0x16e>
 8003b9e:	b1b8      	cbz	r0, 8003bd0 <_svfiprintf_r+0x104>
 8003ba0:	e00f      	b.n	8003bc2 <_svfiprintf_r+0xf6>
 8003ba2:	462f      	mov	r7, r5
 8003ba4:	e7b8      	b.n	8003b18 <_svfiprintf_r+0x4c>
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <_svfiprintf_r+0x1dc>)
 8003ba8:	1a80      	subs	r0, r0, r2
 8003baa:	fa0b f000 	lsl.w	r0, fp, r0
 8003bae:	4318      	orrs	r0, r3
 8003bb0:	9004      	str	r0, [sp, #16]
 8003bb2:	463d      	mov	r5, r7
 8003bb4:	e7d3      	b.n	8003b5e <_svfiprintf_r+0x92>
 8003bb6:	9a03      	ldr	r2, [sp, #12]
 8003bb8:	1d11      	adds	r1, r2, #4
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	9103      	str	r1, [sp, #12]
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	db01      	blt.n	8003bc6 <_svfiprintf_r+0xfa>
 8003bc2:	9207      	str	r2, [sp, #28]
 8003bc4:	e004      	b.n	8003bd0 <_svfiprintf_r+0x104>
 8003bc6:	4252      	negs	r2, r2
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	9207      	str	r2, [sp, #28]
 8003bce:	9304      	str	r3, [sp, #16]
 8003bd0:	783b      	ldrb	r3, [r7, #0]
 8003bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bd4:	d10c      	bne.n	8003bf0 <_svfiprintf_r+0x124>
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bda:	d133      	bne.n	8003c44 <_svfiprintf_r+0x178>
 8003bdc:	9b03      	ldr	r3, [sp, #12]
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	9203      	str	r2, [sp, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bfb8      	it	lt
 8003be8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bec:	3702      	adds	r7, #2
 8003bee:	9305      	str	r3, [sp, #20]
 8003bf0:	4d2e      	ldr	r5, [pc, #184]	; (8003cac <_svfiprintf_r+0x1e0>)
 8003bf2:	7839      	ldrb	r1, [r7, #0]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7fc fb0a 	bl	8000210 <memchr>
 8003bfc:	b138      	cbz	r0, 8003c0e <_svfiprintf_r+0x142>
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	1b40      	subs	r0, r0, r5
 8003c02:	fa03 f000 	lsl.w	r0, r3, r0
 8003c06:	9b04      	ldr	r3, [sp, #16]
 8003c08:	4303      	orrs	r3, r0
 8003c0a:	3701      	adds	r7, #1
 8003c0c:	9304      	str	r3, [sp, #16]
 8003c0e:	7839      	ldrb	r1, [r7, #0]
 8003c10:	4827      	ldr	r0, [pc, #156]	; (8003cb0 <_svfiprintf_r+0x1e4>)
 8003c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c16:	2206      	movs	r2, #6
 8003c18:	1c7e      	adds	r6, r7, #1
 8003c1a:	f7fc faf9 	bl	8000210 <memchr>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d038      	beq.n	8003c94 <_svfiprintf_r+0x1c8>
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <_svfiprintf_r+0x1e8>)
 8003c24:	bb13      	cbnz	r3, 8003c6c <_svfiprintf_r+0x1a0>
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	3307      	adds	r3, #7
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	3308      	adds	r3, #8
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c34:	444b      	add	r3, r9
 8003c36:	9309      	str	r3, [sp, #36]	; 0x24
 8003c38:	e76d      	b.n	8003b16 <_svfiprintf_r+0x4a>
 8003c3a:	fb05 3202 	mla	r2, r5, r2, r3
 8003c3e:	2001      	movs	r0, #1
 8003c40:	460f      	mov	r7, r1
 8003c42:	e7a6      	b.n	8003b92 <_svfiprintf_r+0xc6>
 8003c44:	2300      	movs	r3, #0
 8003c46:	3701      	adds	r7, #1
 8003c48:	9305      	str	r3, [sp, #20]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	250a      	movs	r5, #10
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c54:	3a30      	subs	r2, #48	; 0x30
 8003c56:	2a09      	cmp	r2, #9
 8003c58:	d903      	bls.n	8003c62 <_svfiprintf_r+0x196>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0c8      	beq.n	8003bf0 <_svfiprintf_r+0x124>
 8003c5e:	9105      	str	r1, [sp, #20]
 8003c60:	e7c6      	b.n	8003bf0 <_svfiprintf_r+0x124>
 8003c62:	fb05 2101 	mla	r1, r5, r1, r2
 8003c66:	2301      	movs	r3, #1
 8003c68:	4607      	mov	r7, r0
 8003c6a:	e7f0      	b.n	8003c4e <_svfiprintf_r+0x182>
 8003c6c:	ab03      	add	r3, sp, #12
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4622      	mov	r2, r4
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <_svfiprintf_r+0x1ec>)
 8003c74:	a904      	add	r1, sp, #16
 8003c76:	4640      	mov	r0, r8
 8003c78:	f3af 8000 	nop.w
 8003c7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c80:	4681      	mov	r9, r0
 8003c82:	d1d6      	bne.n	8003c32 <_svfiprintf_r+0x166>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	065b      	lsls	r3, r3, #25
 8003c88:	f53f af35 	bmi.w	8003af6 <_svfiprintf_r+0x2a>
 8003c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c8e:	b01d      	add	sp, #116	; 0x74
 8003c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c94:	ab03      	add	r3, sp, #12
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <_svfiprintf_r+0x1ec>)
 8003c9c:	a904      	add	r1, sp, #16
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f000 f882 	bl	8003da8 <_printf_i>
 8003ca4:	e7ea      	b.n	8003c7c <_svfiprintf_r+0x1b0>
 8003ca6:	bf00      	nop
 8003ca8:	0800421c 	.word	0x0800421c
 8003cac:	08004222 	.word	0x08004222
 8003cb0:	08004226 	.word	0x08004226
 8003cb4:	00000000 	.word	0x00000000
 8003cb8:	08003a19 	.word	0x08003a19

08003cbc <_printf_common>:
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	4691      	mov	r9, r2
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	688a      	ldr	r2, [r1, #8]
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bfb8      	it	lt
 8003cd0:	4613      	movlt	r3, r2
 8003cd2:	f8c9 3000 	str.w	r3, [r9]
 8003cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cda:	4606      	mov	r6, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	b112      	cbz	r2, 8003ce6 <_printf_common+0x2a>
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c9 3000 	str.w	r3, [r9]
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	0699      	lsls	r1, r3, #26
 8003cea:	bf42      	ittt	mi
 8003cec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cf0:	3302      	addmi	r3, #2
 8003cf2:	f8c9 3000 	strmi.w	r3, [r9]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	f015 0506 	ands.w	r5, r5, #6
 8003cfc:	d107      	bne.n	8003d0e <_printf_common+0x52>
 8003cfe:	f104 0a19 	add.w	sl, r4, #25
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	f8d9 2000 	ldr.w	r2, [r9]
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	42ab      	cmp	r3, r5
 8003d0c:	dc28      	bgt.n	8003d60 <_printf_common+0xa4>
 8003d0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	3300      	adds	r3, #0
 8003d16:	bf18      	it	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	0692      	lsls	r2, r2, #26
 8003d1c:	d42d      	bmi.n	8003d7a <_printf_common+0xbe>
 8003d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d22:	4639      	mov	r1, r7
 8003d24:	4630      	mov	r0, r6
 8003d26:	47c0      	blx	r8
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d020      	beq.n	8003d6e <_printf_common+0xb2>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	68e5      	ldr	r5, [r4, #12]
 8003d30:	f8d9 2000 	ldr.w	r2, [r9]
 8003d34:	f003 0306 	and.w	r3, r3, #6
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	bf08      	it	eq
 8003d3c:	1aad      	subeq	r5, r5, r2
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	6922      	ldr	r2, [r4, #16]
 8003d42:	bf0c      	ite	eq
 8003d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d48:	2500      	movne	r5, #0
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bfc4      	itt	gt
 8003d4e:	1a9b      	subgt	r3, r3, r2
 8003d50:	18ed      	addgt	r5, r5, r3
 8003d52:	f04f 0900 	mov.w	r9, #0
 8003d56:	341a      	adds	r4, #26
 8003d58:	454d      	cmp	r5, r9
 8003d5a:	d11a      	bne.n	8003d92 <_printf_common+0xd6>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e008      	b.n	8003d72 <_printf_common+0xb6>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4652      	mov	r2, sl
 8003d64:	4639      	mov	r1, r7
 8003d66:	4630      	mov	r0, r6
 8003d68:	47c0      	blx	r8
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d103      	bne.n	8003d76 <_printf_common+0xba>
 8003d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d76:	3501      	adds	r5, #1
 8003d78:	e7c3      	b.n	8003d02 <_printf_common+0x46>
 8003d7a:	18e1      	adds	r1, r4, r3
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	2030      	movs	r0, #48	; 0x30
 8003d80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d84:	4422      	add	r2, r4
 8003d86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d8e:	3302      	adds	r3, #2
 8003d90:	e7c5      	b.n	8003d1e <_printf_common+0x62>
 8003d92:	2301      	movs	r3, #1
 8003d94:	4622      	mov	r2, r4
 8003d96:	4639      	mov	r1, r7
 8003d98:	4630      	mov	r0, r6
 8003d9a:	47c0      	blx	r8
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d0e6      	beq.n	8003d6e <_printf_common+0xb2>
 8003da0:	f109 0901 	add.w	r9, r9, #1
 8003da4:	e7d8      	b.n	8003d58 <_printf_common+0x9c>
	...

08003da8 <_printf_i>:
 8003da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003db0:	460c      	mov	r4, r1
 8003db2:	7e09      	ldrb	r1, [r1, #24]
 8003db4:	b085      	sub	sp, #20
 8003db6:	296e      	cmp	r1, #110	; 0x6e
 8003db8:	4617      	mov	r7, r2
 8003dba:	4606      	mov	r6, r0
 8003dbc:	4698      	mov	r8, r3
 8003dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003dc0:	f000 80b3 	beq.w	8003f2a <_printf_i+0x182>
 8003dc4:	d822      	bhi.n	8003e0c <_printf_i+0x64>
 8003dc6:	2963      	cmp	r1, #99	; 0x63
 8003dc8:	d036      	beq.n	8003e38 <_printf_i+0x90>
 8003dca:	d80a      	bhi.n	8003de2 <_printf_i+0x3a>
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	f000 80b9 	beq.w	8003f44 <_printf_i+0x19c>
 8003dd2:	2958      	cmp	r1, #88	; 0x58
 8003dd4:	f000 8083 	beq.w	8003ede <_printf_i+0x136>
 8003dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ddc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003de0:	e032      	b.n	8003e48 <_printf_i+0xa0>
 8003de2:	2964      	cmp	r1, #100	; 0x64
 8003de4:	d001      	beq.n	8003dea <_printf_i+0x42>
 8003de6:	2969      	cmp	r1, #105	; 0x69
 8003de8:	d1f6      	bne.n	8003dd8 <_printf_i+0x30>
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	0605      	lsls	r5, r0, #24
 8003df0:	f103 0104 	add.w	r1, r3, #4
 8003df4:	d52a      	bpl.n	8003e4c <_printf_i+0xa4>
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da03      	bge.n	8003e06 <_printf_i+0x5e>
 8003dfe:	222d      	movs	r2, #45	; 0x2d
 8003e00:	425b      	negs	r3, r3
 8003e02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e06:	486f      	ldr	r0, [pc, #444]	; (8003fc4 <_printf_i+0x21c>)
 8003e08:	220a      	movs	r2, #10
 8003e0a:	e039      	b.n	8003e80 <_printf_i+0xd8>
 8003e0c:	2973      	cmp	r1, #115	; 0x73
 8003e0e:	f000 809d 	beq.w	8003f4c <_printf_i+0x1a4>
 8003e12:	d808      	bhi.n	8003e26 <_printf_i+0x7e>
 8003e14:	296f      	cmp	r1, #111	; 0x6f
 8003e16:	d020      	beq.n	8003e5a <_printf_i+0xb2>
 8003e18:	2970      	cmp	r1, #112	; 0x70
 8003e1a:	d1dd      	bne.n	8003dd8 <_printf_i+0x30>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	e003      	b.n	8003e2e <_printf_i+0x86>
 8003e26:	2975      	cmp	r1, #117	; 0x75
 8003e28:	d017      	beq.n	8003e5a <_printf_i+0xb2>
 8003e2a:	2978      	cmp	r1, #120	; 0x78
 8003e2c:	d1d4      	bne.n	8003dd8 <_printf_i+0x30>
 8003e2e:	2378      	movs	r3, #120	; 0x78
 8003e30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e34:	4864      	ldr	r0, [pc, #400]	; (8003fc8 <_printf_i+0x220>)
 8003e36:	e055      	b.n	8003ee4 <_printf_i+0x13c>
 8003e38:	6813      	ldr	r3, [r2, #0]
 8003e3a:	1d19      	adds	r1, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6011      	str	r1, [r2, #0]
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e08c      	b.n	8003f66 <_printf_i+0x1be>
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6011      	str	r1, [r2, #0]
 8003e50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e54:	bf18      	it	ne
 8003e56:	b21b      	sxthne	r3, r3
 8003e58:	e7cf      	b.n	8003dfa <_printf_i+0x52>
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	6825      	ldr	r5, [r4, #0]
 8003e5e:	1d18      	adds	r0, r3, #4
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	0628      	lsls	r0, r5, #24
 8003e64:	d501      	bpl.n	8003e6a <_printf_i+0xc2>
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	e002      	b.n	8003e70 <_printf_i+0xc8>
 8003e6a:	0668      	lsls	r0, r5, #25
 8003e6c:	d5fb      	bpl.n	8003e66 <_printf_i+0xbe>
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	4854      	ldr	r0, [pc, #336]	; (8003fc4 <_printf_i+0x21c>)
 8003e72:	296f      	cmp	r1, #111	; 0x6f
 8003e74:	bf14      	ite	ne
 8003e76:	220a      	movne	r2, #10
 8003e78:	2208      	moveq	r2, #8
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e80:	6865      	ldr	r5, [r4, #4]
 8003e82:	60a5      	str	r5, [r4, #8]
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	f2c0 8095 	blt.w	8003fb4 <_printf_i+0x20c>
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	f021 0104 	bic.w	r1, r1, #4
 8003e90:	6021      	str	r1, [r4, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d13d      	bne.n	8003f12 <_printf_i+0x16a>
 8003e96:	2d00      	cmp	r5, #0
 8003e98:	f040 808e 	bne.w	8003fb8 <_printf_i+0x210>
 8003e9c:	4665      	mov	r5, ip
 8003e9e:	2a08      	cmp	r2, #8
 8003ea0:	d10b      	bne.n	8003eba <_printf_i+0x112>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	07db      	lsls	r3, r3, #31
 8003ea6:	d508      	bpl.n	8003eba <_printf_i+0x112>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	bfde      	ittt	le
 8003eb0:	2330      	movle	r3, #48	; 0x30
 8003eb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eb6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eba:	ebac 0305 	sub.w	r3, ip, r5
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	f8cd 8000 	str.w	r8, [sp]
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	aa03      	add	r2, sp, #12
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7ff fef6 	bl	8003cbc <_printf_common>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d14d      	bne.n	8003f70 <_printf_i+0x1c8>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed8:	b005      	add	sp, #20
 8003eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ede:	4839      	ldr	r0, [pc, #228]	; (8003fc4 <_printf_i+0x21c>)
 8003ee0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	6821      	ldr	r1, [r4, #0]
 8003ee8:	1d1d      	adds	r5, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6015      	str	r5, [r2, #0]
 8003eee:	060a      	lsls	r2, r1, #24
 8003ef0:	d50b      	bpl.n	8003f0a <_printf_i+0x162>
 8003ef2:	07ca      	lsls	r2, r1, #31
 8003ef4:	bf44      	itt	mi
 8003ef6:	f041 0120 	orrmi.w	r1, r1, #32
 8003efa:	6021      	strmi	r1, [r4, #0]
 8003efc:	b91b      	cbnz	r3, 8003f06 <_printf_i+0x15e>
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	f022 0220 	bic.w	r2, r2, #32
 8003f04:	6022      	str	r2, [r4, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	e7b7      	b.n	8003e7a <_printf_i+0xd2>
 8003f0a:	064d      	lsls	r5, r1, #25
 8003f0c:	bf48      	it	mi
 8003f0e:	b29b      	uxthmi	r3, r3
 8003f10:	e7ef      	b.n	8003ef2 <_printf_i+0x14a>
 8003f12:	4665      	mov	r5, ip
 8003f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f18:	fb02 3311 	mls	r3, r2, r1, r3
 8003f1c:	5cc3      	ldrb	r3, [r0, r3]
 8003f1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f22:	460b      	mov	r3, r1
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d1f5      	bne.n	8003f14 <_printf_i+0x16c>
 8003f28:	e7b9      	b.n	8003e9e <_printf_i+0xf6>
 8003f2a:	6813      	ldr	r3, [r2, #0]
 8003f2c:	6825      	ldr	r5, [r4, #0]
 8003f2e:	6961      	ldr	r1, [r4, #20]
 8003f30:	1d18      	adds	r0, r3, #4
 8003f32:	6010      	str	r0, [r2, #0]
 8003f34:	0628      	lsls	r0, r5, #24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	d501      	bpl.n	8003f3e <_printf_i+0x196>
 8003f3a:	6019      	str	r1, [r3, #0]
 8003f3c:	e002      	b.n	8003f44 <_printf_i+0x19c>
 8003f3e:	066a      	lsls	r2, r5, #25
 8003f40:	d5fb      	bpl.n	8003f3a <_printf_i+0x192>
 8003f42:	8019      	strh	r1, [r3, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	4665      	mov	r5, ip
 8003f4a:	e7b9      	b.n	8003ec0 <_printf_i+0x118>
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	1d19      	adds	r1, r3, #4
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	681d      	ldr	r5, [r3, #0]
 8003f54:	6862      	ldr	r2, [r4, #4]
 8003f56:	2100      	movs	r1, #0
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f7fc f959 	bl	8000210 <memchr>
 8003f5e:	b108      	cbz	r0, 8003f64 <_printf_i+0x1bc>
 8003f60:	1b40      	subs	r0, r0, r5
 8003f62:	6060      	str	r0, [r4, #4]
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	6123      	str	r3, [r4, #16]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f6e:	e7a7      	b.n	8003ec0 <_printf_i+0x118>
 8003f70:	6923      	ldr	r3, [r4, #16]
 8003f72:	462a      	mov	r2, r5
 8003f74:	4639      	mov	r1, r7
 8003f76:	4630      	mov	r0, r6
 8003f78:	47c0      	blx	r8
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d0aa      	beq.n	8003ed4 <_printf_i+0x12c>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	079b      	lsls	r3, r3, #30
 8003f82:	d413      	bmi.n	8003fac <_printf_i+0x204>
 8003f84:	68e0      	ldr	r0, [r4, #12]
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	4298      	cmp	r0, r3
 8003f8a:	bfb8      	it	lt
 8003f8c:	4618      	movlt	r0, r3
 8003f8e:	e7a3      	b.n	8003ed8 <_printf_i+0x130>
 8003f90:	2301      	movs	r3, #1
 8003f92:	464a      	mov	r2, r9
 8003f94:	4639      	mov	r1, r7
 8003f96:	4630      	mov	r0, r6
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d09a      	beq.n	8003ed4 <_printf_i+0x12c>
 8003f9e:	3501      	adds	r5, #1
 8003fa0:	68e3      	ldr	r3, [r4, #12]
 8003fa2:	9a03      	ldr	r2, [sp, #12]
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	42ab      	cmp	r3, r5
 8003fa8:	dcf2      	bgt.n	8003f90 <_printf_i+0x1e8>
 8003faa:	e7eb      	b.n	8003f84 <_printf_i+0x1dc>
 8003fac:	2500      	movs	r5, #0
 8003fae:	f104 0919 	add.w	r9, r4, #25
 8003fb2:	e7f5      	b.n	8003fa0 <_printf_i+0x1f8>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ac      	bne.n	8003f12 <_printf_i+0x16a>
 8003fb8:	7803      	ldrb	r3, [r0, #0]
 8003fba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc2:	e76c      	b.n	8003e9e <_printf_i+0xf6>
 8003fc4:	0800422d 	.word	0x0800422d
 8003fc8:	0800423e 	.word	0x0800423e

08003fcc <memcpy>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	1e43      	subs	r3, r0, #1
 8003fd0:	440a      	add	r2, r1
 8003fd2:	4291      	cmp	r1, r2
 8003fd4:	d100      	bne.n	8003fd8 <memcpy+0xc>
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fe0:	e7f7      	b.n	8003fd2 <memcpy+0x6>

08003fe2 <memmove>:
 8003fe2:	4288      	cmp	r0, r1
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	eb01 0302 	add.w	r3, r1, r2
 8003fea:	d807      	bhi.n	8003ffc <memmove+0x1a>
 8003fec:	1e42      	subs	r2, r0, #1
 8003fee:	4299      	cmp	r1, r3
 8003ff0:	d00a      	beq.n	8004008 <memmove+0x26>
 8003ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ffa:	e7f8      	b.n	8003fee <memmove+0xc>
 8003ffc:	4283      	cmp	r3, r0
 8003ffe:	d9f5      	bls.n	8003fec <memmove+0xa>
 8004000:	1881      	adds	r1, r0, r2
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	42d3      	cmn	r3, r2
 8004006:	d100      	bne.n	800400a <memmove+0x28>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800400e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004012:	e7f7      	b.n	8004004 <memmove+0x22>

08004014 <_free_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4605      	mov	r5, r0
 8004018:	2900      	cmp	r1, #0
 800401a:	d045      	beq.n	80040a8 <_free_r+0x94>
 800401c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004020:	1f0c      	subs	r4, r1, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfb8      	it	lt
 8004026:	18e4      	addlt	r4, r4, r3
 8004028:	f000 f8d2 	bl	80041d0 <__malloc_lock>
 800402c:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <_free_r+0x98>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	4610      	mov	r0, r2
 8004032:	b933      	cbnz	r3, 8004042 <_free_r+0x2e>
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	6014      	str	r4, [r2, #0]
 8004038:	4628      	mov	r0, r5
 800403a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800403e:	f000 b8c8 	b.w	80041d2 <__malloc_unlock>
 8004042:	42a3      	cmp	r3, r4
 8004044:	d90c      	bls.n	8004060 <_free_r+0x4c>
 8004046:	6821      	ldr	r1, [r4, #0]
 8004048:	1862      	adds	r2, r4, r1
 800404a:	4293      	cmp	r3, r2
 800404c:	bf04      	itt	eq
 800404e:	681a      	ldreq	r2, [r3, #0]
 8004050:	685b      	ldreq	r3, [r3, #4]
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	bf04      	itt	eq
 8004056:	1852      	addeq	r2, r2, r1
 8004058:	6022      	streq	r2, [r4, #0]
 800405a:	6004      	str	r4, [r0, #0]
 800405c:	e7ec      	b.n	8004038 <_free_r+0x24>
 800405e:	4613      	mov	r3, r2
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	b10a      	cbz	r2, 8004068 <_free_r+0x54>
 8004064:	42a2      	cmp	r2, r4
 8004066:	d9fa      	bls.n	800405e <_free_r+0x4a>
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	1858      	adds	r0, r3, r1
 800406c:	42a0      	cmp	r0, r4
 800406e:	d10b      	bne.n	8004088 <_free_r+0x74>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	4401      	add	r1, r0
 8004074:	1858      	adds	r0, r3, r1
 8004076:	4282      	cmp	r2, r0
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	d1dd      	bne.n	8004038 <_free_r+0x24>
 800407c:	6810      	ldr	r0, [r2, #0]
 800407e:	6852      	ldr	r2, [r2, #4]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	4401      	add	r1, r0
 8004084:	6019      	str	r1, [r3, #0]
 8004086:	e7d7      	b.n	8004038 <_free_r+0x24>
 8004088:	d902      	bls.n	8004090 <_free_r+0x7c>
 800408a:	230c      	movs	r3, #12
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	e7d3      	b.n	8004038 <_free_r+0x24>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	1821      	adds	r1, r4, r0
 8004094:	428a      	cmp	r2, r1
 8004096:	bf04      	itt	eq
 8004098:	6811      	ldreq	r1, [r2, #0]
 800409a:	6852      	ldreq	r2, [r2, #4]
 800409c:	6062      	str	r2, [r4, #4]
 800409e:	bf04      	itt	eq
 80040a0:	1809      	addeq	r1, r1, r0
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	605c      	str	r4, [r3, #4]
 80040a6:	e7c7      	b.n	8004038 <_free_r+0x24>
 80040a8:	bd38      	pop	{r3, r4, r5, pc}
 80040aa:	bf00      	nop
 80040ac:	20000094 	.word	0x20000094

080040b0 <_malloc_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	1ccd      	adds	r5, r1, #3
 80040b4:	f025 0503 	bic.w	r5, r5, #3
 80040b8:	3508      	adds	r5, #8
 80040ba:	2d0c      	cmp	r5, #12
 80040bc:	bf38      	it	cc
 80040be:	250c      	movcc	r5, #12
 80040c0:	2d00      	cmp	r5, #0
 80040c2:	4606      	mov	r6, r0
 80040c4:	db01      	blt.n	80040ca <_malloc_r+0x1a>
 80040c6:	42a9      	cmp	r1, r5
 80040c8:	d903      	bls.n	80040d2 <_malloc_r+0x22>
 80040ca:	230c      	movs	r3, #12
 80040cc:	6033      	str	r3, [r6, #0]
 80040ce:	2000      	movs	r0, #0
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	f000 f87d 	bl	80041d0 <__malloc_lock>
 80040d6:	4a21      	ldr	r2, [pc, #132]	; (800415c <_malloc_r+0xac>)
 80040d8:	6814      	ldr	r4, [r2, #0]
 80040da:	4621      	mov	r1, r4
 80040dc:	b991      	cbnz	r1, 8004104 <_malloc_r+0x54>
 80040de:	4c20      	ldr	r4, [pc, #128]	; (8004160 <_malloc_r+0xb0>)
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	b91b      	cbnz	r3, 80040ec <_malloc_r+0x3c>
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f863 	bl	80041b0 <_sbrk_r>
 80040ea:	6020      	str	r0, [r4, #0]
 80040ec:	4629      	mov	r1, r5
 80040ee:	4630      	mov	r0, r6
 80040f0:	f000 f85e 	bl	80041b0 <_sbrk_r>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d124      	bne.n	8004142 <_malloc_r+0x92>
 80040f8:	230c      	movs	r3, #12
 80040fa:	6033      	str	r3, [r6, #0]
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 f868 	bl	80041d2 <__malloc_unlock>
 8004102:	e7e4      	b.n	80040ce <_malloc_r+0x1e>
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	1b5b      	subs	r3, r3, r5
 8004108:	d418      	bmi.n	800413c <_malloc_r+0x8c>
 800410a:	2b0b      	cmp	r3, #11
 800410c:	d90f      	bls.n	800412e <_malloc_r+0x7e>
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	50cd      	str	r5, [r1, r3]
 8004112:	18cc      	adds	r4, r1, r3
 8004114:	4630      	mov	r0, r6
 8004116:	f000 f85c 	bl	80041d2 <__malloc_unlock>
 800411a:	f104 000b 	add.w	r0, r4, #11
 800411e:	1d23      	adds	r3, r4, #4
 8004120:	f020 0007 	bic.w	r0, r0, #7
 8004124:	1ac3      	subs	r3, r0, r3
 8004126:	d0d3      	beq.n	80040d0 <_malloc_r+0x20>
 8004128:	425a      	negs	r2, r3
 800412a:	50e2      	str	r2, [r4, r3]
 800412c:	e7d0      	b.n	80040d0 <_malloc_r+0x20>
 800412e:	428c      	cmp	r4, r1
 8004130:	684b      	ldr	r3, [r1, #4]
 8004132:	bf16      	itet	ne
 8004134:	6063      	strne	r3, [r4, #4]
 8004136:	6013      	streq	r3, [r2, #0]
 8004138:	460c      	movne	r4, r1
 800413a:	e7eb      	b.n	8004114 <_malloc_r+0x64>
 800413c:	460c      	mov	r4, r1
 800413e:	6849      	ldr	r1, [r1, #4]
 8004140:	e7cc      	b.n	80040dc <_malloc_r+0x2c>
 8004142:	1cc4      	adds	r4, r0, #3
 8004144:	f024 0403 	bic.w	r4, r4, #3
 8004148:	42a0      	cmp	r0, r4
 800414a:	d005      	beq.n	8004158 <_malloc_r+0xa8>
 800414c:	1a21      	subs	r1, r4, r0
 800414e:	4630      	mov	r0, r6
 8004150:	f000 f82e 	bl	80041b0 <_sbrk_r>
 8004154:	3001      	adds	r0, #1
 8004156:	d0cf      	beq.n	80040f8 <_malloc_r+0x48>
 8004158:	6025      	str	r5, [r4, #0]
 800415a:	e7db      	b.n	8004114 <_malloc_r+0x64>
 800415c:	20000094 	.word	0x20000094
 8004160:	20000098 	.word	0x20000098

08004164 <_realloc_r>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	4607      	mov	r7, r0
 8004168:	4614      	mov	r4, r2
 800416a:	460e      	mov	r6, r1
 800416c:	b921      	cbnz	r1, 8004178 <_realloc_r+0x14>
 800416e:	4611      	mov	r1, r2
 8004170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004174:	f7ff bf9c 	b.w	80040b0 <_malloc_r>
 8004178:	b922      	cbnz	r2, 8004184 <_realloc_r+0x20>
 800417a:	f7ff ff4b 	bl	8004014 <_free_r>
 800417e:	4625      	mov	r5, r4
 8004180:	4628      	mov	r0, r5
 8004182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004184:	f000 f826 	bl	80041d4 <_malloc_usable_size_r>
 8004188:	42a0      	cmp	r0, r4
 800418a:	d20f      	bcs.n	80041ac <_realloc_r+0x48>
 800418c:	4621      	mov	r1, r4
 800418e:	4638      	mov	r0, r7
 8004190:	f7ff ff8e 	bl	80040b0 <_malloc_r>
 8004194:	4605      	mov	r5, r0
 8004196:	2800      	cmp	r0, #0
 8004198:	d0f2      	beq.n	8004180 <_realloc_r+0x1c>
 800419a:	4631      	mov	r1, r6
 800419c:	4622      	mov	r2, r4
 800419e:	f7ff ff15 	bl	8003fcc <memcpy>
 80041a2:	4631      	mov	r1, r6
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff ff35 	bl	8004014 <_free_r>
 80041aa:	e7e9      	b.n	8004180 <_realloc_r+0x1c>
 80041ac:	4635      	mov	r5, r6
 80041ae:	e7e7      	b.n	8004180 <_realloc_r+0x1c>

080041b0 <_sbrk_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4c06      	ldr	r4, [pc, #24]	; (80041cc <_sbrk_r+0x1c>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4605      	mov	r5, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	f7fc fd64 	bl	8000c88 <_sbrk>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_sbrk_r+0x1a>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_sbrk_r+0x1a>
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20000168 	.word	0x20000168

080041d0 <__malloc_lock>:
 80041d0:	4770      	bx	lr

080041d2 <__malloc_unlock>:
 80041d2:	4770      	bx	lr

080041d4 <_malloc_usable_size_r>:
 80041d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d8:	1f18      	subs	r0, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfbc      	itt	lt
 80041de:	580b      	ldrlt	r3, [r1, r0]
 80041e0:	18c0      	addlt	r0, r0, r3
 80041e2:	4770      	bx	lr

080041e4 <_init>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr

080041f0 <_fini>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr
